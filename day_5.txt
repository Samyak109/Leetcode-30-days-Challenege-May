***************************Problem**********************************
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.
*************************My Solution 5ms****************************
class Solution {
    public int firstUniqChar(String s) {
        if(s.length()==0) return -1;
        if(s.length()==1) return 0;
        int[] countArray = new int[26];
        for(char ch:s.toCharArray()){
            countArray[ch - 'a']++;
        }
        for(int i=0 ;i<s.length();++i){
            char ch = s.charAt(i);
            if(countArray[ch-'a']==1){
                return i;
            }
        }
        return -1;
        
    }
}
***********************************1ms******************************
using if(indexOf(char)==lastIndexOf(char) that means it is unique
class Solution {
    public int firstUniqChar(String s) {
        int res = Integer.MAX_VALUE;
        
        for(char c = 'a'; c <= 'z'; c++){
            int index = s.indexOf(c);
            
            if(index != -1 && index == s.lastIndexOf(c))
                res = Math.min(res, index);
        }
        
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}
********************SOLUTION****************************************
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        // build hash map : character and how often it appears
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }
        
        // find the index
        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}
//here only lowercase characters do not appear
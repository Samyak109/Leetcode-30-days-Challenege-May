************************Problem*************************************
Permutation in String
Solution
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

**********************My Solution 11 ms*****************************
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length()) return false;
        int[] count = new int[26];
        for(char ch:s1.toCharArray()){
            count[ch-'a']++;
        }
        int left =0;
        int right =0;
        int counter = s1.length();
        while(right<s2.length()){
            if(count[s2.charAt(right)-'a']<=0){
                if(left==right){
                    left++;
                    right++;
                } else
                if(counter!=s1.length()){
                    count[s2.charAt(left++)-'a']++;
                    counter++;
                }
                    
            } else{
                count[s2.charAt(right++)-'a']--;
                counter--;
                if(counter==0)
                return true;
            }
        };
        return false;
        
    }
 }
 *****************Solution******************************************
 see in leetcode
 ********************2 ms*******************************************
 class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] counts = new int[128];
        for(int i=0;i<s1.length();i++){
            counts[s1.charAt(i)]++;
        }
        int n = s1.length();
        
        int left=0;
        int right=0;
        char[] arr = s2.toCharArray();
        while(right<arr.length){
            while(right<arr.length && counts[arr[right]]>0){
                counts[arr[right]]--;
                right++;
            }
            
            if(right-left==n)return true;
         
            while(right<arr.length && counts[arr[right]]<=0){
                counts[arr[left++]]++;
            }
            
            
        }
        
        
        return false;
    }
}
*******************776 ms*******************************************
class Solution {

    public boolean checkInclusion(String s1, String s2) {
        s1 = sort(s1);
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            if (s1.equals(sort(s2.substring(i, i + s1.length()))))
                return true;
        }
        return false;
    }
    public String sort(String s) {
        char[] t = s.toCharArray();
        Arrays.sort(t);
        return new String(t);
    }
}
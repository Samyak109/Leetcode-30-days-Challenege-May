********************Problem*****************************************

Edit Distance
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

********************Solution****************************************
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length()+1;
        int n = word2.length()+1;
        int[][] dp = new int[m][n];
        for(int i = 0;i<m;++i){
            dp[i][0] = i;
        }
        for(int i = 0;i<n;++i){
            dp[0][i] = i;
        }
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]))+1;
                }
                
            }
        }
        return dp[m-1][n-1];
    }
}

******************OPtimal space*************************************
class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        if (n == 0 || m == 0) {
            return Math.max(n, m);
        }
        int[] dp = new int[n+1];
        for (int i = 0; i <= n; i++) {
            dp[i] = n - i;
        }
        for (int i = m - 1; i >= 0; i--) {
            int rightMost = m - i;
            for (int j = n - 1; j >= 0; j--) {
                int ops = 0;
                if (word1.charAt(j) != word2.charAt(i)) {
                    ops = Math.min(rightMost, dp[j+1]);
                    ops = Math.min(ops, dp[j]);
                    ops += 1;
                } else {
                    ops = dp[j+1];
                }
                dp[j+1] = rightMost;
                rightMost = ops;
            }
            dp[0] = rightMost;
        }
        return dp[0];
    }
}
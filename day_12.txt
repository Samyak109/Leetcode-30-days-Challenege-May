**********************Problem***************************************
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.
**********************My Solution 1ms*******************************
class Solution {
    public int singleNonDuplicate(int[] nums) {
     int ans = 0;
     for(int element: nums){
         ans ^= element;
     }   
      return ans;  
    }
}
**********************0ms Solution**********************************
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int lo = 0, len = nums.length, hi = len / 2;

        while (lo < hi){
            int mid = lo + ((hi - lo) >> 1);
            if (nums[2 * mid] == nums[2 * mid + 1]){
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return nums[2 * lo];

    }
}
********************Solution****************************************
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search. Below is an observation in input array.
All elements before the required have first occurrence at even index (0, 2, ..) and next occurrence at odd index (1, 3, …). And all elements after the required element have first occurrence at odd index and next occurrence at even index.

1) Find the middle index, say ‘mid’.

2) If ‘mid’ is even, then compare arr[mid] and arr[mid + 1]. If both are same, then the required element after ‘mid’ else before mid.

3) If ‘mid’ is odd, then compare arr[mid] and arr[mid – 1]. If both are same, then the required element after ‘mid’ else before mid.
// Java program to find the element that appears only once 

public class Main 
{ 
	// A Binary Search based method to find the element 
	// that appears only once 
	public static void search(int[] arr, int low, int high) 
	{ 
		if(low > high) 
			return; 
		if(low == high) 
		{ 
			System.out.println("The required element is "+arr[low]); 
			return; 
		} 
		
		// Find the middle point 
		int mid = (low + high)/2; 
		
		// If mid is even and element next to mid is 
		// same as mid, then output element lies on 
		// right side, else on left side 
		if(mid % 2 == 0) 
		{ 
			if(arr[mid] == arr[mid+1]) 
				search(arr, mid+2, high); 
			else
				search(arr, low, mid); 
		} 
		// If mid is odd 
		else if(mid % 2 == 1) 
		{ 
			if(arr[mid] == arr[mid-1]) 
				search(arr, mid+1, high); 
			else
				search(arr, low, mid-1); 
		} 
	} 

	public static void main(String[] args) 
	{ 
		int[] arr = {1, 1, 2, 4, 4, 5, 5, 6, 6}; 
		search(arr, 0, arr.length-1); 
	}	 
} 

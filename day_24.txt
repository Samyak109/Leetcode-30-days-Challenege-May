**********************Problem***************************************

Construct Binary Search Tree from Preorder Traversal
Solution
Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.

*******************My Solution**************************************
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static int index = 0;
    public TreeNode bstFromPreorder(int[] preorder) {
        index=0;
        int[] inorder = preorder.clone();
        Arrays.sort(inorder);
        TreeNode root = construct(preorder,inorder,0,inorder.length-1);
        return root;
    }
    public TreeNode construct(int[] preorder,int[] inorder,int start, int end ){
        if(start>end) return null;
        
        int element = preorder[index++];
        
        TreeNode temp = new TreeNode(element); 
        if(start==end) return temp;
        
        int prevIndex = binarySearch(inorder,element);

        temp.left = construct(preorder,inorder,start,prevIndex-1);   
        temp.right = construct(preorder,inorder,prevIndex+1,end);

        return temp;
        }
    
    public int binarySearch(int[] inorder, int target){
        int low = 0;
        int high = inorder.length-1;
        while(low<=high){
            int mid = low+ (high-low)/2;
            if(inorder[mid]==target) return mid;
            else if (inorder[mid]<target) low = mid+1;
            else high = mid-1;
        }
        return -1;
    }
    }

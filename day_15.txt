**************************Problem***********************************
Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

 

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
Example 2:

Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
Example 3:

Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4
Example 4:

Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3
Example 5:

Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
 

Note:

-30000 <= A[i] <= 30000
1 <= A.length <= 30000

*************************My Solution********************************
class Solution {
    public int maxSubarraySumCircular(int[] A) {
        int globalMax = A[0];
        int currentMax = A[0];
        int totalSum = A[0];
        boolean flag = false;
        for(int i = 1;i<A.length;++i){
            if(A[i]>=0) flag = true;
            totalSum += A[i];
            currentMax = Math.max(currentMax+A[i],A[i]);
            if(globalMax<currentMax){
                globalMax = currentMax;
            }
            A[i] = -A[i];
        }
        A[0]=-A[0];
        if(!flag){
            return globalMax;
        }
        
        int globalMax2 = A[0];
        currentMax = A[0];
        for(int i = 1;i<A.length;++i){
            currentMax = Math.max(currentMax+A[i],A[i]);
            if(globalMax2<currentMax){
                globalMax2 = currentMax;
            }    
        }
    
        return (totalSum+globalMax2)>globalMax?(totalSum+globalMax2):globalMax;
    }
}
**********************More intuitive********************************
class Solution {
     public int maxSubarraySumCircular(int[] A) {
        int total = 0, maxSum = -30000, curMax = 0, minSum = 30000, curMin = 0;
        for (int a : A) {
            curMax = Math.max(curMax + a, a);
            maxSum = Math.max(maxSum, curMax);
            curMin = Math.min(curMin + a, a);
            minSum = Math.min(minSum, curMin);
            total += a;
        }
        return maxSum > 0 ? Math.max(maxSum, total - minSum) : maxSum;
    }
}
**********************Solution**************************************
Approach 4: Kadane's (Min Variant)
Intuition and Algorithm

As in Approach 3, subarrays of circular arrays can be classified as either as one-interval subarrays (which we can use Kadane's algorithm), or two-interval subarrays.

We can modify Kadane's algorithm to use min instead of max. All the math in our explanation of Kadane's algorithm remains the same, but the algorithm lets us find the minimum sum of a subarray instead.

For a two interval subarray written as (\sum_{k=0}^{N-1} A_k) - (\sum_{k=i+1}^{j-1} A_k)(∑ 
k=0
N−1
​	
 A 
k
​	
 )−(∑ 
k=i+1
j−1
​	
 A 
k
​	
 ), we can use our kadane-min algorithm to minimize the "interior" (\sum_{k=i+1}^{j-1} A_k)(∑ 
k=i+1
j−1
​	
 A 
k
​	
 ) part of the sum.

Again, because the interior [i+1, j-1][i+1,j−1] must be non-empty, we can break up our search into a search on A[1:] and on A[:-1].
class Solution {
    public int maxSubarraySumCircular(int[] A) {
        // S: sum of A
        int S = 0;
        for (int x: A)
            S += x;

        // ans1: answer for one-interval subarray
        int ans1 = Integer.MIN_VALUE;
        int cur = Integer.MIN_VALUE;
        for (int x: A) {
            cur = x + Math.max(cur, 0);
            ans1 = Math.max(ans1, cur);
        }

        // ans2: answer for two-interval subarray, interior in A[1:]
        int ans2 = Integer.MAX_VALUE;
        cur = Integer.MAX_VALUE;
        for (int i = 1; i < A.length; ++i) {
            cur = A[i] + Math.min(cur, 0);
            ans2 = Math.min(ans2, cur);
        }
        ans2 = S - ans2;

        // ans3: answer for two-interval subarray, interior in A[:-1]
        int ans3 = Integer.MAX_VALUE;
        cur = Integer.MAX_VALUE;
        for (int i = 0; i < A.length - 1; ++i) {
            cur = A[i] + Math.min(cur, 0);
            ans3 = Math.min(ans3, cur);
        }

        return Math.max(ans1, Math.max(ans2, ans3));
    }
}

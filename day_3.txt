***************************PROBLEM**********************************
Given an arbitrary ransom note string and another string containing letters
 from all the magazines, write a function that will return true if the ransom
  note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

**************************My Code 2 ms******************************
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] lowerCaseCount = new int[123];
        for(char ch: ransomNote.toCharArray()){
            lowerCaseCount[ch]++;
        }
        for(char ch: magazine.toCharArray()){
            if(lowerCaseCount[ch]>0)
            lowerCaseCount[ch]--;
        }
        for(int i = 97 ; i<123 ; ++i){
            if(lowerCaseCount[i]!=0){
                return false;
            }
        }
        return true;
    }
    
}



//2ms better
class Solution {
    private static final int R = 26;
    
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] pool = new int[R];
        
        for (char c : ransomNote.toCharArray()) pool[c - 'a'] -= 1;
        
        for (char c : magazine.toCharArray()) pool[c - 'a'] += 1;
        
        for (int i = 0; i < R; i += 1) if (pool[i] < 0) return false;
        
        return true;
    }
}
***********************1ms submission*******************************
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        /// 1ms, 99.65%
        if (ransomNote.length() > magazine.length()) return false;
        
        int[] chars = new int[26];
        int counts = 0;
        for (int i = 0; i < ransomNote.length(); i++)
        {
            int index = ransomNote.charAt(i) - 'a';
            if (chars[index] == 0) counts++;
            chars[index]++;
        }
        
        for (int i = 0; i < magazine.length(); i++)
        {
            int index = magazine.charAt(i) - 'a';
            if (chars[index] == 1) counts--;
            if (counts == 0) return true;
            chars[index]--;
        }
        
        return counts == 0;
    }
    
    // 4ms 70%
    private boolean longFirst(String ransomNote, String magazine)
    {   
        if (ransomNote.length() > magazine.length()) return false;
        
        int[] chars = new int[26];
        for (int i = 0; i < magazine.length(); i++)
        {
            int index = magazine.charAt(i) - 'a';
            chars[index]++;
        }
        
        for (int i = 0; i < ransomNote.length(); i++)
        {
            int index = ransomNote.charAt(i) - 'a';
            if (chars[index] <= 0) return false;
            chars[index]--;
        }
        
        return true;
    }
}

************************0ms submission******************************
class Solution {
    public boolean canConstruct(String ransom, String magazine) {
        if (magazine.length() < ransom.length()) return false;
        int caps[] = new int[26];
        for (char c : ransom.toCharArray()) {
            int index = magazine.indexOf(c, caps[c - 'a']);
            if (index == -1)
                return false;
            caps[c - 97] = index + 1;
        }
        return true;
    }
}